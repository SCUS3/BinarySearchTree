#lang scheme
;Samuel Ginzburg
;BST: Scheme

;Return an empty BST
(define emptyBST (list null null null))

;Create a BST with a singular node
(define (createBST node) (list node null null))

;Create a BST with left, right and element
;(define (createBST element left right)

;BST empty function
(define (emptyTree BST)(null? BST))

;;---Access BST
;Return the root node of the BST
(define (rootNode BST)(car BST))

;Return the left subtree
(define (leftSubTree BST) (car (cdr BST)))

;Return right subtree
;first two cdrs truncate the list. car returns that value
(define (rightSubTree BST) (car (cdr (cdr BST))))

;;--- BST Traversals 
;preOrder traversal of the list
(define (preOrder BST)
  (if(emptyBST?(BST))
     '()
     (define (list(append (list(rootNode(BST))))))
                         (preOrder(leftSubTree(BST)))
                         (preOrder(rightSubTree(BST))))

;inOrder traversal of the list
(define (inOrder BST)  
     (if(emptyBST?(BST))
           '()
            (define (list(append (list(rootNode(BST))))))
                         (inOrder(leftSubTree(BST)))
                         (inOrder(rightSubTree(BST))))

;postOrder traversal of the list
(define (postOrder BST)  
     (if(emptyBST?(BST))
           '()
            (define (list(append (list(rootNode(BST))))))
                         (postOrder(leftSubTree(BST)))
                         (postOrder(rightSubTree(BST))))